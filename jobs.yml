jobs:
  - name: lifecycle-unit
    max_in_flight: 1 # prevent accidental reuse of our compound version numbers
    plan:
      - aggregate:
        - get: lifecycle-repo
          trigger: true
          version: every
        - get: ci
          params:
            submodules: none
        - get: golang-image
          params: {save: true}
      - aggregate:
        - task: format-lifecycle
          image: golang-image
          file: ci/tasks/format-lifecycle/task.yml
        - task: run-unit-tests
          privileged: true
          file: ci/tasks/run-lifecycle-unit/task.yml

  - name: build-lifecycle
    max_in_flight: 1 # prevent accidental reuse of our compound version numbers
    plan:
      - aggregate:
        - get: lifecycle-repo
          passed: [lifecycle-unit]
          trigger: true
        - get: ci
          params:
            submodules: none
        - get: lifecycle-version
          params:
            pre: build
        - get: golang-image
          params: {save: true}
      - task: build-binaries
        image: golang-image
        file: ci/tasks/build-lifecycle/task.yml
        input_mapping:
          version: lifecycle-version
      - put: lifecycle
        params: {file: lifecycle/lifecycle-*}
      - put: lifecycle-version
        params:
          file: lifecycle-version/version


  - name: build-stack-images
    plan:
      - aggregate:
        ## Get repos, versions
        - get: lifecycle-repo
          version: every
          passed: [build-lifecycle]
        - get: ci
          params:
            submodules: none
        - get: lifecycle-version
          passed: [build-lifecycle]
          trigger: true

        ## Get binaries
        - get: lifecycle
          passed: [build-lifecycle]

      ## Prep
      - aggregate:
        - task: move-lifecycle-binaries-for-docker
          file: ci/tasks/move-lifecycle-binaries/task.yml
      - task: generate-docker-build-args
        file: ci/tasks/generate-docker-build-args/task.yml
        input_mapping:
          version: lifecycle-version

      ## Docker builds
      - put: packs-base-image
        params:
          build: ci/images/base
          tag_file: lifecycle-version/version
          build_args:
            base: "ubuntu:18.04"
      - aggregate:
        - put: packs-run-image
          params:
            build: ci/images/run
            tag_file: lifecycle-version/version
            build_args_file: docker-build-args/args.json
        - put: packs-build-image
          params:
            build: lifecycle-binaries
            dockerfile: ci/images/build/Dockerfile
            tag_file: lifecycle-version/version
            build_args:
              go_version: "1.11.4"
            build_args_file: docker-build-args/args.json

  - name: pack-unit
    plan:
      - aggregate:
        - get: pack-repo
          resource: pack-repo
          trigger: true
          version: every
        - get: ci
          params:
            submodules: none
        - get: golang-image
          params: {save: true}
      - task: run-unit-tests
        privileged: true
        file: ci/tasks/run-pack-unit/task.yml

  - name: pack-unit-windows
    plan:
      - aggregate:
        - get: pack-repo
          resource: pack-repo
          trigger: true
          version: every
        - get: ci
          params:
            submodules: none
      - task: unit
        file: ci/tasks/run-pack-unit-windows/task.yml
        tags: [windows]

  - name: pack-build
    plan:
    - aggregate:
      - get: pack-repo
        version: every
        passed:
          - pack-unit
          - pack-unit-windows
        trigger: true
      - get: ci
        params:
          submodules: none
      - get: pack-version
        params:
          pre: build
      - get: golang-image
        params: {save: true}
    - aggregate:
      - task: build-pack-cli-linux
        image: golang-image
        file: ci/tasks/build-pack-cli/task.yml
        output_mapping: {pack-release: pack-linux-release}
        params:
          OS_NAME: linux
      - task: build-pack-cli-darwin
        image: golang-image
        file: ci/tasks/build-pack-cli/task.yml
        output_mapping: {pack-release: pack-darwin-release}
        params:
          OS_NAME: darwin
      - task: build-pack-cli-windows
        image: golang-image
        file: ci/tasks/build-pack-cli/task.yml
        output_mapping: {pack-release: pack-windows-release}
        params:
          OS_NAME: windows
    - aggregate:
      - put: pack-linux-binary
        params: {file: pack-linux-release/pack-*-linux}
      - put: pack-windows-binary
        params: {file: pack-windows-release/pack-*-windows}
      - put: pack-darwin-binary
        params: {file: pack-darwin-release/pack-*-darwin}
      - put: pack-version
        params:
          file: pack-version/version

  - name: acceptance-lifecycle-v0.1.0
    plan:
      - aggregate:
        # Versions
        - get: pack-version
          passed: [pack-build]
          trigger: true

        # Repos
        - get: pack-repo
          passed: [pack-build]
        - get: ci
          params:
            submodules: none

        # Pack binaries
        - get: pack-linux-binary
          passed: [pack-build]
        - get: pack-windows-binary
          passed: [pack-build]
        - get: pack-darwin-binary
          passed: [pack-build]

        # Images
        - get: golang-image
          params: {save: true}

      - task: acceptance
        privileged: true
        file: ci/tasks/run-acceptance/task.yml
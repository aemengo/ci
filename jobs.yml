jobs:
  - name: build-lifecycle-binaries
    max_in_flight: 1 # prevent accidental reuse of our compound version numbers
    plan:
      - get: lifecycle-repo
        trigger: true
        version: every
      - get: ci
      - get: lifecycle-version
        resource: lifecycle-version
        params:
          pre: alpha
      - put:  lifecycle-build-number
        resource: lifecycle-build-number
        params:
          pre: build
      - aggregate:
        - task: format-lifecycle
          file: ci/tasks/format-lifecycle/task.yml
        - task: run-unit-tests
          privileged: true
          file: ci/tasks/run-lifecycle-unit/task.yml
        - task: build-binaries
          privileged: true
          file: ci/tasks/build-lifecycle-binaries/task.yml
      - aggregate:
        - put: detector-gcs
          params: {file: lifecycle-binaries/detector-*}
        - put: analyzer-gcs
          params: {file: lifecycle-binaries/analyzer-*}
        - put: builder-gcs
          params: {file: lifecycle-binaries/builder-*}
        - put: exporter-gcs
          params: {file: lifecycle-binaries/exporter-*}
        - put: launcher-gcs
          params: {file: lifecycle-binaries/launcher-*}

  - name: build-stack-images
    plan:
      - aggregate:
        ## Get repos, versions
        - get: lifecycle-repo
          version: every
          passed: [build-lifecycle-binaries]
        - get: ci
          passed: [build-lifecycle-binaries]
        - get: lifecycle-version
          resource: lifecycle-version
          passed: [build-lifecycle-binaries]
          params:
            pre: alpha
        - get: lifecycle-build-number
          resource: lifecycle-build-number
          passed: [build-lifecycle-binaries]
          trigger: true

        ## Get binaries
        - get: detector-gcs
          passed: [build-lifecycle-binaries]
        - get: analyzer-gcs
          passed: [build-lifecycle-binaries]
        - get: builder-gcs
          passed: [build-lifecycle-binaries]
        - get: exporter-gcs
          passed: [build-lifecycle-binaries]
        - get: launcher-gcs
          passed: [build-lifecycle-binaries]

      ## Prep
      - aggregate:
        - task: calculate-lifecycle-version
          file: ci/tasks/calculate-lifecycle-version/task.yml
        - task: move-lifecycle-binaries-for-docker
          file: ci/tasks/move-lifecycle-binaries/task.yml
      - task: generate-docker-build-args
        file: ci/tasks/generate-docker-build-args/task.yml

      ## Docker builds
      - put: packs-base-image
        params:
          build: lifecycle-binaries
          dockerfile: ci/images/base/Dockerfile
          tag_file: lifecycle-series-and-build-version/version
          build_args:
            base: "ubuntu:18.04"
      - aggregate:
        - put: packs-run-image
          params:
            build: lifecycle-binaries
            dockerfile: ci/images/run/Dockerfile
            tag_file: lifecycle-series-and-build-version/version
            build_args_file: docker-build-args/args.json
        - put: packs-build-image
          params:
            build: lifecycle-binaries
            dockerfile: ci/images/build/Dockerfile
            tag_file: lifecycle-series-and-build-version/version
            build_args:
              go_version: "1.11.4"
            build_args_file: docker-build-args/args.json
      - put: packs-samples-image
        params:
          build: lifecycle-binaries
          dockerfile: ci/images/samples/Dockerfile
          tag_file: lifecycle-series-and-build-version/version
          build_args_file: docker-build-args/args.json

  - name: pack-unit
    plan:
      - aggregate:
        - get: pack-repo
          resource: pack-repo
          trigger: true
          version: every
        - get: ci
      - task: run-unit-tests
        privileged: true
        file: ci/tasks/run-pack-unit/task.yml

  - name: acceptance
    plan:
      - aggregate:
        - get: pack-repo
          resource: pack-repo
          passed: [pack-unit]
        - get: ci
          passed: [build-stack-images, pack-unit]
        # Images
        - get: packs-base-image
          passed: [build-stack-images]
        - get: packs-build-image
          passed: [build-stack-images]
          params: {save: true}
        - get: packs-run-image
          passed: [build-stack-images]
          params: {save: true}
        - get: packs-samples-image
          passed: [build-stack-images]
          params: {save: true}
        # Versions
        - get: lifecycle-version
          resource: lifecycle-version
          passed: [build-stack-images]
          params:
            pre: alpha
        - get: lifecycle-build-number
          resource: lifecycle-build-number
          passed: [build-stack-images]
          trigger: true
        # Binaries
        - get: detector-gcs
          passed: [build-stack-images]
        - get: analyzer-gcs
          passed: [build-stack-images]
        - get: builder-gcs
          passed: [build-stack-images]
        - get: exporter-gcs
          passed: [build-stack-images]
        - get: launcher-gcs
          passed: [build-stack-images]
      - task: calculate-lifecycle-version
        file: ci/tasks/calculate-lifecycle-version/task.yml
      - task: acceptance
        privileged: true
        file: ci/tasks/run-acceptance/task.yml
      - task: assemble-binary-archive
        file: ci/tasks/assemble-binary-archive/task.yml
        params:
          VERSION_FILE: lifecycle-series-and-build-version/version
      - put: latest-lifecycle-archive-dev
        params:
          file: binaries-archive/lifecycle-binaries-latest.tgz
          content_type: application/gzip # there's no distinct tgz mimetype

  - name: release-lifecycle
    plan:
      - aggregate:
        - get: ci
          passed: [acceptance]
        - get: lifecycle-version
          resource: lifecycle-version
          passed: [acceptance]
          params:
            pre: alpha
        - get: lifecycle-build-number
          resource: lifecycle-build-number
          passed: [acceptance]
          params:
            pre: build
        - get: packs-base-image
          passed: [acceptance]
          params: {save: true}
        - get: packs-build-image
          passed: [acceptance]
          params: {save: true}
        - get: packs-run-image
          passed: [acceptance]
          params: {save: true}
        - get: packs-samples-image
          passed: [acceptance]
          params: {save: true}
      - task: release-version-create
        file: ci/tasks/release-version-create/task.yml
        # TODO: These images should be published to DockerHub, not GCR, when we're happy with this pipeline
      - task: assemble-binary-archive
        file: ci/tasks/assemble-binary-archive/task.yml
        params:
          VERSION_FILE: lifecycle-version/version
      - aggregate:
        - put: packs-base-image
          params:
            load: packs-base-image
            tag_file: release-lifecycle-version/version
        - put: packs-build-image
          params:
            load: packs-build-image
            tag_file: release-lifecycle-version/version
        - put: packs-run-image
          params:
            load: packs-run-image
            tag_file: release-lifecycle-version/version
        - put: packs-samples-image
          params:
            load: packs-samples-image
            tag_file: release-lifecycle-version/version
        - put: lifecycle-version
          resource: lifecycle-version
          params:
            pre: alpha

